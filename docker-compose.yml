# Docker Compose for South Delhi Real Estate App

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      network: host # Add this line to fix the network issue
    container_name: south-delhi-realty-app
    ports:
      - "7922:7922"
    environment:
      # Database Configuration
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}

      # Cloudinary Configuration
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}

      # Session Configuration
      - SESSION_SECRET=${SESSION_SECRET}
      - SESSION_STORE_TYPE=${SESSION_STORE_TYPE}
      - SESSION_MAX_AGE=${SESSION_MAX_AGE}
      - SESSION_SECURE_COOKIES=${SESSION_SECURE_COOKIES}
      - SSL_ENABLED=${SSL_ENABLED}

      # Server Configuration
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
      - LOG_LEVEL=${LOG_LEVEL}

      # Security
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}

      # Client Configuration
      - CLIENT_URL=${CLIENT_URL}

      # Google OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}

      # Email Configuration
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_SECURE=${EMAIL_SECURE}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
    env_file:
      - .env
    volumes:
      # Mount uploads directory for file persistence
      - ./uploads:/app/uploads
      # Mount logs directory for log persistence
      - ./logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - mysql
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http = require('http'); const options = { host: 'localhost', port: process.env.PORT || 7922, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database Service (Optional - for local development)
  mysql:
    image: mysql:8.0
    container_name: south-delhi-realty-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      # Persist database data
      - mysql_data:/var/lib/mysql
      # Mount properties.sql for initialization
      - ./properties.sql:/docker-entrypoint-initdb.d/01-properties.sql:ro
      # Mount migrations for initialization
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - app-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DB_PASSWORD}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: south-delhi-realty-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-docker.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - app-network
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production

volumes:
  mysql_data:
    driver: local

networks:
  app-network:
    driver: bridge
