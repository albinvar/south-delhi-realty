services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: sdr-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-southdelhirealestate123}
      MYSQL_DATABASE: ${DB_NAME:-southdelhirealestate}
      MYSQL_USER: ${DB_USER:-sduser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-sdpassword}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./properties.sql:/docker-entrypoint-initdb.d/01-properties.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - sdr-network
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10

  # Redis for session storage (optional, can be removed if using in-memory)
  redis:
    image: redis:7-alpine
    container_name: sdr-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - sdr-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # Web Application
  webapp:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sdr-webapp
    restart: unless-stopped
    ports:
      - "${APP_PORT:-5000}:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      
      # Database configuration
      DB_HOST: db
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-southdelhirealestate}
      DB_USER: ${DB_USER:-sduser}
      DB_PASSWORD: ${DB_PASSWORD:-sdpassword}
      
      # Session configuration
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-session-key-change-this-in-production}
      
      # Email configuration (optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@southdelhirealty.com}
      
      # Google OAuth (optional)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      
      # Cloudinary (optional for image uploads)
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET:-}
      
      # Application URLs
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5000}
      BACKEND_URL: ${BACKEND_URL:-http://localhost:5000}
      
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - sdr-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      timeout: 3s
      retries: 5
      start_period: 30s

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: sdr-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs_data:/var/log/nginx
    networks:
      - sdr-network
    depends_on:
      - webapp
    profiles:
      - nginx

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  sdr-network:
    driver: bridge
