# South Delhi Real Estate - Production Dockerfile for VPS Deployment
# Multi-stage build: First builds the application, then creates production image

# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./
COPY vite.config.ts ./
COPY postcss.config.js ./
COPY tailwind.config.ts ./

# Install all dependencies (including dev dependencies for building)
RUN npm install

# Copy source code
COPY client/ ./client/
COPY server/ ./server/
COPY shared/ ./shared/
COPY scripts/ ./scripts/

# Build the application
RUN npm run build

# Production stage using a lightweight base image
FROM node:20-alpine AS production

# Install runtime dependencies and curl for health checks
RUN apk add --no-cache curl dumb-init && \
    rm -rf /var/cache/apk/*

# Create a non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S appuser -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder /app/dist/ ./
COPY package*.json ./

# Remove "type": "module" from package.json for CommonJS output
RUN sed -i '/"type": "module",/d' package.json

# Install only production dependencies
RUN npm install --omit=dev && \
    npm cache clean --force && \
    rm -rf ~/.npm

# Create necessary directories with proper permissions
RUN mkdir -p logs uploads && \
    chown -R appuser:nodejs /app && \
    chmod -R 755 logs uploads

# Switch to non-root user
USER appuser

# Expose the port
EXPOSE 7822

# Health check for container orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:7822/health || exit 1

# Use dumb-init for proper signal handling in containers
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server/index.js"]
