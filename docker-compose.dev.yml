# Development docker-compose with hot reload

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: sdr-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-southdelhirealestate123}
      MYSQL_DATABASE: ${DB_NAME:-southdelhirealestate_dev}
      MYSQL_USER: ${DB_USER:-sduser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-sdpassword}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./properties.sql:/docker-entrypoint-initdb.d/01-properties.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - sdr-dev-network
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10

  # Development Web Application with hot reload
  webapp-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: sdr-webapp-dev
    restart: unless-stopped
    ports:
      - "${APP_PORT:-5000}:5000"
      - "${VITE_PORT:-5173}:5173"
    environment:
      NODE_ENV: development
      PORT: 5000
      
      # Database configuration
      DB_HOST: db
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-southdelhirealestate_dev}
      DB_USER: ${DB_USER:-sduser}
      DB_PASSWORD: ${DB_PASSWORD:-sdpassword}
      
      # Session configuration
      SESSION_SECRET: ${SESSION_SECRET:-dev-session-secret-not-for-production}
      
      # Development URLs
      FRONTEND_URL: http://localhost:5173
      BACKEND_URL: http://localhost:5000
      
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/node_modules
      - uploads_dev_data:/app/uploads
      - logs_dev_data:/app/logs
    networks:
      - sdr-dev-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      timeout: 3s
      retries: 5
      start_period: 30s

volumes:
  mysql_dev_data:
    driver: local
  uploads_dev_data:
    driver: local
  logs_dev_data:
    driver: local

networks:
  sdr-dev-network:
    driver: bridge
